$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px
);

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//  >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// .container will change width according to viewport width
// with padding and auto margin
.container {
  width: 100%;
  height: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding-left: 10px;
  padding-right: 10px;

  @include media-breakpoint-up(lg) {
    max-width: 992px;
  }

  @include media-breakpoint-up(xl) {
    max-width: 1100px;
  }

  @include media-breakpoint-up(sm) {
    padding-left: 40px;
    padding-right: 40px;
  }
}

.container-fluid {
  width: 100%; height: 100%;
  padding-left: 10px;
  padding-right: 10px;
  @include media-breakpoint-up(sm) {
    padding-left: 20px;
    padding-right: 20px;
  }
}

.row {
  display: grid;
  grid-template-columns: repeat(12, 1fr);
  height: 100%;

}

[class*="col-"] {
  grid-column: span 12;
}

// Create 12 columns at each break points
@each $name in (sm, md, lg, xl) {
  $width: map-get($map: $grid-breakpoints, $key: $name);

  @media (min-width: $width) {
    @for $i from 1 through 12 {
      .col-#{$name}-#{$i} {
        grid-column: span $i;
      }
    }
  }

}